{
  "extends": ["@tsconfig/strictest/tsconfig.json", "@tsconfig/node18/tsconfig.json"],
  "exclude": ["node_modules", "benchmark", "static", "e2e-test", "fixtures", "fixtures-tmp", "dist", "bin", "tmp"],
  "compilerOptions": {
    "module": "Node16",
    "moduleResolution": "node16",
    "noEmit": true,
    "incremental": true,
    "tsBuildInfoFile": "node_modules/.cache/typescript/.tsbuildinfo",
    /* Lint Options */
    "noUnusedLocals": false, // Delegate to @typescript-eslint/no-unused-vars in eslint
    "noUnusedParameters": false, // Delegate to @typescript-eslint/no-unused-vars in eslint

    // ðŸ¤¯ðŸ¤¯ðŸ¤¯ THIS IS SUPER HACK!!! ðŸ¤¯ðŸ¤¯ðŸ¤¯
    // - comlink provides an ESM module (ex. `comlink/dist/esm/node-adapter.mjs`)
    // - Of course, comlink also provide type definitions (ex. `comlink/dist/esm/node-adapter.d.ts`)
    // - However, the corresponding type definition for `xxx.mjs` is `xxx.d.mts` in `"module": "node12"` mode
    // - Therefore, importing the ESM module causes compilation errors
    // - So, use `paths` option to force `xxx.mjs` to be mapped to `xxx.d.ts`.
    "baseUrl": ".",
    "paths": {
      "comlink/dist/esm/node-adapter.mjs": ["./node_modules/comlink/dist/esm/node-adapter.js"]
    }
  }
}
