diff --git a/index.d.ts b/index.d.ts
index 538c0dc1851122fbba808968e02100c9ca5728c4..d16f8776837a844f5e8be9b4053386e53d495ef5 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -842,7 +842,7 @@ export class Linter {
 
     version: string;
 
-    constructor(options?: { cwd?: string | undefined; configType?: "flat" });
+    constructor(options?: { cwd?: string | undefined; configType?: "flat" | "eslintrc" });
 
     verify(
         code: SourceCode | string,
diff --git a/use-at-your-own-risk.d.ts b/use-at-your-own-risk.d.ts
index 089a657babec22d7bfa526d10d2950c77af041f3..31c56d1ed865fb11ba484efba01edc6ba7c57da9 100644
--- a/use-at-your-own-risk.d.ts
+++ b/use-at-your-own-risk.d.ts
@@ -1,6 +1,63 @@
+import { ESLint, Linter, Rule } from "eslint";
+
 /** @deprecated */
 export const builtinRules: Map<string, import("./index.js").Rule.RuleModule>;
 /** @deprecated */
+export namespace FlatESLint {
+    interface Options {
+        // File enumeration
+        cwd?: string | undefined;
+        errorOnUnmatchedPattern?: boolean | undefined;
+        globInputPaths?: boolean | undefined;
+        ignore?: boolean | undefined;
+
+        // Linting
+        allowInlineConfig?: boolean | undefined;
+        baseConfig?: Linter.FlatConfig | Linter.FlatConfig[] | undefined;
+        overrideConfig?: Linter.FlatConfig | Linter.FlatConfig[] | undefined;
+        overrideConfigFile?: boolean | string | undefined;
+        reportUnusedDisableDirectives?: Linter.StringSeverity | undefined;
+
+        // Autofix
+        fix?: boolean | ((message: Linter.LintMessage) => boolean) | undefined;
+        fixTypes?: Rule.RuleMetaData['type'][] | undefined;
+
+        // Cache-related
+        cache?: boolean | undefined;
+        cacheLocation?: string | undefined;
+        cacheStrategy?: 'content' | 'metadata' | undefined;
+    }
+}
+/** @deprecated */
+export class FlatESLint {
+    constructor(options?: FlatESLint.Options);
+
+    static get version(): string;
+
+    static outputFixes(results: ESLint.LintResult[]): Promise<void>;
+
+    static getErrorResults(results: ESLint.LintResult[]): ESLint.LintResult[];
+
+    getRulesMetaForResults(results: ESLint.LintResult[]): Record<string, Rule.RuleMetaData>;
+
+    lintFiles(patterns: string | string[]): Promise<ESLint.LintResult[]>;
+
+    lintText(
+      code: string,
+      options?: { filePath?: string | undefined; warnIgnored?: boolean | undefined },
+    ): Promise<ESLint.LintResult[]>;
+
+    loadFormatter(name?: string): Promise<ESLint.Formatter>;
+
+    calculateConfigForFile(filePath: string): Promise<Linter.FlatConfig | undefined>;
+
+    findConfigFile(): Promise<string | undefined>;
+
+    isPathIgnored(filePath: string): Promise<boolean>;
+}
+/** @deprecated */
+export function shouldUseFlatConfig(): Promise<boolean>;
+/** @deprecated */
 export class FileEnumerator {
     constructor(
         params?: {
@@ -17,3 +74,7 @@ export class FileEnumerator {
         patternOrPatterns: string | string[],
     ): IterableIterator<{ config: any; filePath: string; ignored: boolean }>;
 }
+export {
+    /** @deprecated */
+    ESLint as LegacyESLint
+};
